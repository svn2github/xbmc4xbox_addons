diff --git a/script.module.xbmcswift2/lib/xbmcswift2/plugin.py b/script.module.xbmcswift2/lib/xbmcswift2/plugin.py
index 7b635aa6..6120896 100644
--- a/script.module.xbmcswift2/lib/xbmcswift2/plugin.py
+++ b/script.module.xbmcswift2/lib/xbmcswift2/plugin.py
@@ -293,7 +293,7 @@ class Plugin(XBMCMixin):
             raise AmbiguousUrlException
 
         pathqs = rule.make_path_qs(items)
-        return 'plugin://%s%s' % (self._addon_id, pathqs)
+        return '%s%s' % (sys.argv[0], pathqs)
 
     def _dispatch(self, path):
         for rule in self._routes:
diff --git a/script.module.xbmcswift2/lib/xbmcswift2/request.py b/script.module.xbmcswift2/lib/xbmcswift2/request.py
index 2a8a7c3..3fed660 100644
--- a/script.module.xbmcswift2/lib/xbmcswift2/request.py
+++ b/script.module.xbmcswift2/lib/xbmcswift2/request.py
@@ -38,6 +38,8 @@ class Request(object):
         # relative url, e.g. //plugin.video.helloxbmc/path
         self.scheme, remainder = url.split(':', 1)
         parts = urlparse.urlparse(remainder)
-        self.netloc, self.path, self.query_string = (
-            parts[1], parts[2], parts[4])
+        pathqs = parse_qs(parts[4])
+        self.netloc = parts[1]
+        self.path = pathqs.get('path', ['/'])[0]
+        self.query_string = pathqs.get('qs', [''])[0]
         self.args = unpickle_args(parse_qs(self.query_string))
diff --git a/script.module.xbmcswift2/lib/xbmcswift2/urls.py b/script.module.xbmcswift2/lib/xbmcswift2/urls.py
index 472d7a2..50f4b72 100644
--- a/script.module.xbmcswift2/lib/xbmcswift2/urls.py
+++ b/script.module.xbmcswift2/lib/xbmcswift2/urls.py
@@ -157,7 +157,7 @@ class UrlRule(object):
                          if key in self._keywords)
 
         # Create the path
-        path = self._make_path(url_items)
+        path = '?path=%s' % quote_plus(self._make_path(url_items))
 
         # Extra arguments get tacked on to the query string
         qs_items = dict((key, val) for key, val in items.items()
@@ -165,7 +165,7 @@ class UrlRule(object):
         qs = self._make_qs(qs_items)
 
         if qs:
-            return '?'.join([path, qs])
+            return '&qs='.join([path, qs])
         return path
 
     @property
