import xbmcplugin
import xbmcgui
import sys, random
import urllib, urllib2
from cookielib import Cookie
from cookielib import CookieJar
import re, base64
from htmlentitydefs import name2codepoint as n2cp

thisPlugin = int(sys.argv[1])

urlHost = "http://www.burning-series.to/"
cookiePattern = "<HTML><HEAD><SCRIPT language=\"javascript\" src=\"([^\"]+)\"></SCRIPT></HEAD><BODY onload=\"scf\('(.*?)'\+'(.*?)','/'\);\"></BODY></HTML>"

regexContentA = '<ul id="serSeries">.*?</ul>'
regexContentB = '<li><a href="(.*?)">(.*?)</a></li>'
regexSeasonsA = '<ul class="pages">.*?</ul>'
regexSeasonsB = '<li.*?><a href="(.*?)".*?>(.*?)</a></li>'
regexEpisodesA = '<table>.*?</table>'
regexEpisodesB = '<tr>.*?<td>(.*?)</td>.*?<td>.*?<a href="(.*?)"><strong>(.*?)</strong>.*?<span lang="en">(.*?)</span>.*?<td.*?</td>.*?</tr>'
regexHostsA = '</small></h3>.*?<ul>(.*?)</ul>.*?</section>'
regexHostsB = '<a href="(.*?)"><span class="icon (.*?)">.*?</a>'
# ------------------------

def showContent():
	global thisPlugin
	print "-- showContent started"
	scrapedCookie = getSiteCookie(urlHost, cookiePattern)
	print "scrapedCookie : "+scrapedCookie
	content = getUrl(urlHost+"andere-serien",scrapedCookie)#.replace("&amp;","&")
	
	print content
	matchA = re.compile(regexContentA,re.DOTALL).findall(content)
	matchB = re.compile(regexContentB,re.DOTALL).findall(matchA[0])
	for m in matchB:
		#print m
		addDirectoryItem(m[1].strip(), {"urlS": m[0],"cookie": scrapedCookie})  
	print "--- showContent ok"	
	xbmcplugin.endOfDirectory(thisPlugin)

def showSeasons(urlS,siteCookie):
	global thisPlugin
	print "--- showSeasons started with "+urlS
	print "--- found"
	content = getUrl(urlS,siteCookie)
	matchA = re.compile(regexSeasonsA,re.DOTALL).findall(content)
	matchB = re.compile(regexSeasonsB,re.DOTALL).findall(matchA[0])
	for m in matchB:
			print m
			preString = ""
			if is_number(m[1]):
				preString = "Staffel "
			addDirectoryItem(preString+m[1], {"urlE": m[0],"cookie": siteCookie})
 
	print "--- showSeasons ok"	
	xbmcplugin.endOfDirectory(thisPlugin)

def showEpisodes(urlE,siteCookie):
	global thisPlugin
	print "---- showEpisodes started with "+urlE
	print "---- found"
	content = getUrl(urlE,siteCookie)
	matchA = re.compile(regexEpisodesA,re.DOTALL).findall(content)
	#print matchA[0]
	matchB = re.compile(regexEpisodesB,re.DOTALL).findall(matchA[0])
	for m in matchB:
			#print m
			addDirectoryItem(m[0].strip()+" - "+m[2]+" : "+m[3], {"urlH": m[1],"cookie": siteCookie}) 
	print "---- showEpisodes ok"	
	xbmcplugin.endOfDirectory(thisPlugin)

def showHosts(urlH,SiteCookie):
	global thisPlugin
	print "----- showHosts started with "+urlH
	print "----- found"
	content = getUrl(urlH)
	matchA = re.compile(regexHostsA,re.DOTALL).findall(content)
	#print matchA[0]
	matchB = re.compile(regexHostsB,re.DOTALL).findall(matchA[0])
	for m in matchB:
			#print m
			addDirectoryItem("Play from "+m[1].strip(), {"urlV": m[0],"cookie": siteCookie})
			print m[1]+" : "+m[0]  
	print "----- showHosts ok"	
	xbmcplugin.endOfDirectory(thisPlugin)
	
def showVideo(urlV):

	global thisPlugin
	print "--->> showVideo started on "+urlV
	content = getUrl(urlV)
	
	# --- Megavideo ---
	if urlV.find("Megavideo")>0 :
		matchA = re.compile('embed src="(.*?)"').findall(content)
		print matchA[0]
		matchB = re.compile('http://www.megavideo.com/(\?v=|v/){1}(.*)').findall(matchA[0])
		print "-> matchB"
		print matchB
		XMLLink = "http://www.megavideo.com/xml/videolink.php?v="+matchB[0][1]
		print XMLLink
		contentXML =  getUrl(XMLLink)
		print contentXML

		# scrape variables for decrypting
		findUN = re.compile('\sun="(.*?)"').findall(contentXML)
		findK2 = re.compile('\sk2="(.*?)"').findall(contentXML)
		findK1 = re.compile('\sk1="(.*?)"').findall(contentXML)
		findS = re.compile('\ss="(.*?)"').findall(contentXML)
		findTITLE = re.compile('\stitle="(.*?)"').findall(contentXML)

		Kk1 = int(findK1[0])
		Kk2 = int(findK2[0])
		Kun = findUN[0]
		Ks = findS[0]
		Ktitle = findTITLE[0]
		
		print str(Kk1)+" : "+str(Kk2)+" : "+Kun+" : "+Ks+" : "+Ktitle
		# thanks to bitbit & xtream for codehints
		# http://userscripts.org/scripts/review/42944
		# http://code.google.com/p/xbmc-xstream-plugin/source/browse/trunk/plugins/video/plugin.video.xstream/hosters/megavideo.py?r=91
		videoLink = "http://www" + Ks + ".megavideo.com/files/" + decryptMega(Kun, Kk1, Kk2) + "/?.flv"
		
	# --- zShare ---
	if urlV.find("zShare")>0 :
		matchA = re.compile('video_actions">.*?<a href="(.*?)"><span',re.DOTALL).findall(content)
		print matchA[0]
		content = getUrl(matchA[0])
		matchB = re.compile('iframe src="http://www.zshare.net/(.*?)"').findall(content)
		print "-> matchB"
		print matchB
		contentVideo2 =  getUrl('http://www.zshare.net/'+matchB[0])
		findRealUrl = re.compile('a href="(.*?)" style="color: #666666; text-decoration: none;font-size:11px;font-weight:bold;" target=_blank>Download').findall(contentVideo2)
		values = {'referer2':'','download':1,'imageField.x':76,'imageField.y':28}
		user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
		headers = { 'User-Agent' : user_agent }
		cjar = cookielib.LWPCookieJar()
		cjar = urllib2.HTTPCookieProcessor(cjar) 
		opener = urllib2.build_opener(cjar)
		urllib2.install_opener(opener)
		data = urllib.urlencode(values)
		req = urllib2.Request(findRealUrl[0], data, headers)
		response = urllib2.urlopen(req)
		link = response.read()
		findVideoUrl=re.compile('new Array\(\'(.*?)\'\);').findall(link)
		print findVideoUrl
		videoLink=findVideoUrl[0].replace("','","");
		print "VideoLink :"+videoLink
		#print findKeys
		#videoLink = findKeys[0]
	
	# --- RapidVideo ---
	if urlV.find("RapidVideo")>0 :
		matchB = re.compile('video_actions">.*?<a href="(.*?)"><span',re.DOTALL).findall(content)
		print "-> matchB"
		print matchB
		contentXML =  getUrl(matchB[0])
		findKeys = re.compile('\'file\',\'(.*?)\'').findall(contentXML)
		print findKeys
		videoLink = findKeys[0]
		
	# --- VideoBB ---
	if urlV.find("VideoBB")>0 :
		matchB = re.compile('video_actions">.*?<a href="(.*?)"><span',re.DOTALL).findall(content)
		print "-> matchB"
		print matchB
		varsUrl =  getUrl(matchB[0])
		getJSONUrl = re.compile('value="setting=(.*?)" name').findall(varsUrl)
		print "-> JSONUrl encoded"
		print getJSONUrl[0]
		JSONurl = base64.b64decode(getJSONUrl[0])
		print "-> JSONUrl decoded"
		print JSONurl
		videoUrl = getUrl(JSONurl)
		#print videoUrl
		isVideoUrl = re.compile('"token1":"(.*?)"').findall(videoUrl)
		print "-> VideoUrl encoded"
		print isVideoUrl[0]
		videoLink = base64.b64decode(isVideoUrl[0])
 		print "-> VideoUrl decoded"
		
		# --- Putlocker ---
	if urlV.find("PutLocker")>0 :
		matchB = re.compile('video_actions">.*?<a href="(.*?)"><span',re.DOTALL).findall(content)
		print "-> matchB"
		print matchB
		varsUrl =  getUrl(matchB[0])
		gethashValue = re.compile('type="hidden" value="(.*?)" name="hash"').findall(varsUrl)
		values = {'hash': gethashValue[0], 'confirm':'Continue as Free User'}
		print values
		user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
		headers = { 'User-Agent' : user_agent }
		cjar = cookielib.LWPCookieJar()
		cjar = urllib2.HTTPCookieProcessor(cjar) 
		opener = urllib2.build_opener(cjar)
		urllib2.install_opener(opener)
		data = urllib.urlencode(values)
		req = urllib2.Request(matchB[0], data, headers)
		response = urllib2.urlopen(req)
		link = response.read()
		code = re.compile("stream=(.+?)'").findall(link)
		req = urllib2.Request('http://www.putlocker.com/get_file.php?stream='+code[0])
		req.add_header('User-Agent', user_agent)
		response = urllib2.urlopen(req)
		link=response.read()
		videoLink = re.compile('<media:content url="(.+?)"').findall(link)[0]


	print videoLink
	item = xbmcgui.ListItem("burningseries")
	xbmc.Player(xbmc.PLAYER_CORE_DVDPLAYER).play(videoLink, item)

# -------- helper ------

def decryptMega(str1, key1, key2):

    __reg1 = []
    __reg3 = 0
    while (__reg3 < len(str1)):
            __reg0 = str1[__reg3]
            holder = __reg0
            if (holder == "0"):
                    __reg1.append("0000")
            else:
                    if (__reg0 == "1"):
                            __reg1.append("0001")
                    else:
                            if (__reg0 == "2"):
                                    __reg1.append("0010")
                            else:
                                    if (__reg0 == "3"):
                                            __reg1.append("0011")
                                    else:
                                            if (__reg0 == "4"):
                                                    __reg1.append("0100")
                                            else:
                                                    if (__reg0 == "5"):
                                                            __reg1.append("0101")
                                                    else:
                                                            if (__reg0 == "6"):
                                                                    __reg1.append("0110")
                                                            else:
                                                                    if (__reg0 == "7"):
                                                                            __reg1.append("0111")
                                                                    else:
                                                                            if (__reg0 == "8"):
                                                                                    __reg1.append("1000")
                                                                            else:
                                                                                    if (__reg0 == "9"):
                                                                                            __reg1.append("1001")
                                                                                    else:
                                                                                            if (__reg0 == "a"):
                                                                                                    __reg1.append("1010")
                                                                                            else:
                                                                                                    if (__reg0 == "b"):
                                                                                                            __reg1.append("1011")
                                                                                                    else:
                                                                                                            if (__reg0 == "c"):
                                                                                                                    __reg1.append("1100")
                                                                                                            else:
                                                                                                                    if (__reg0 == "d"):
                                                                                                                            __reg1.append("1101")
                                                                                                                    else:
                                                                                                                            if (__reg0 == "e"):
                                                                                                                                    __reg1.append("1110")
                                                                                                                            else:
                                                                                                                                    if (__reg0 == "f"):
                                                                                                                                            __reg1.append("1111")

            __reg3 = __reg3 + 1

    mtstr = ajoin(__reg1)
    __reg1 = asplit(mtstr)
    __reg6 = []
    __reg3 = 0
    while (__reg3 < 384):

            key1 = (int(key1) * 11 + 77213) % 81371
            key2 = (int(key2) * 17 + 92717) % 192811
            __reg6.append((int(key1) + int(key2)) % 128)
            __reg3 = __reg3 + 1

    __reg3 = 256
    while (__reg3 >= 0):

            __reg5 = __reg6[__reg3]
            __reg4 = __reg3 % 128
            __reg8 = __reg1[__reg5]
            __reg1[__reg5] = __reg1[__reg4]
            __reg1[__reg4] = __reg8
            __reg3 = __reg3 - 1

    __reg3 = 0
    while (__reg3 < 128):

            __reg1[__reg3] = int(__reg1[__reg3]) ^ int(__reg6[__reg3 + 256]) & 1
            __reg3 = __reg3 + 1

    __reg12 = ajoin(__reg1)
    __reg7 = []
    __reg3 = 0
    while (__reg3 < len(__reg12)):

            __reg9 = __reg12[__reg3:__reg3 + 4]
            __reg7.append(__reg9)
            __reg3 = __reg3 + 4


    __reg2 = []
    __reg3 = 0
    while (__reg3 < len(__reg7)):
            __reg0 = __reg7[__reg3]
            holder2 = __reg0

            if (holder2 == "0000"):
                    __reg2.append("0")
            else:
                    if (__reg0 == "0001"):
                            __reg2.append("1")
                    else:
                            if (__reg0 == "0010"):
                                    __reg2.append("2")
                            else:
                                    if (__reg0 == "0011"):
                                            __reg2.append("3")
                                    else:
                                            if (__reg0 == "0100"):
                                                    __reg2.append("4")
                                            else:
                                                    if (__reg0 == "0101"):
                                                            __reg2.append("5")
                                                    else:
                                                            if (__reg0 == "0110"):
                                                                    __reg2.append("6")
                                                            else:
                                                                    if (__reg0 == "0111"):
                                                                            __reg2.append("7")
                                                                    else:
                                                                            if (__reg0 == "1000"):
                                                                                    __reg2.append("8")
                                                                            else:
                                                                                    if (__reg0 == "1001"):
                                                                                            __reg2.append("9")
                                                                                    else:
                                                                                            if (__reg0 == "1010"):
                                                                                                    __reg2.append("a")
                                                                                            else:
                                                                                                    if (__reg0 == "1011"):
                                                                                                            __reg2.append("b")
                                                                                                    else:
                                                                                                            if (__reg0 == "1100"):
                                                                                                                    __reg2.append("c")
                                                                                                            else:
                                                                                                                    if (__reg0 == "1101"):
                                                                                                                            __reg2.append("d")
                                                                                                                    else:
                                                                                                                            if (__reg0 == "1110"):
                                                                                                                                    __reg2.append("e")
                                                                                                                            else:
                                                                                                                                    if (__reg0 == "1111"):
                                                                                                                                            __reg2.append("f")

            __reg3 = __reg3 + 1

    endstr = ajoin(__reg2)
    return endstr
	
def ajoin(arr):
    strtest = ''
    for num in range(len(arr)):
		strtest = strtest + str(arr[num])
    return strtest

def asplit(mystring):
	arr = []
	for num in range(len(mystring)):
		arr.append(mystring[num])
	return arr
		
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

def baseN(num,b,numerals="0123456789abcdefghijklmnopqrstuvwxyz"):
	return ((num == 0) and numerals[0]) or (baseN(num // b, b, numerals).lstrip(numerals[0]) + numerals[num % b])

def getUrl(urlE,cookie):
		
	jar = CookieJar()
	req = urllib2.Request(url=urlE)
	jar.set_cookie(makeCookie(cookie))
	jar.add_cookie_header(req)
	req.add_header('Referer', 'http://burning-series.to/')
	req.add_header('User-Agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')
	req.add_header('Accept-Language', 'de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4')
	req.add_header('Accept-Charset', 'ISO-8859-1,utf-8;q=0.7,*;q=0.7')

	opener = urllib2.build_opener()
	link = opener.open(req).read()

	print "urlData in getUrl : "+link
	#cp = urllib2.HTTPCookieProcessor()
	#cj = cp.cookiejar

	# see cookielib.Cookie documentation for options description
	#cj.set_cookie(cookielib.Cookie(name='sitechrx', value=cookie, domain='www.burning-series.to/', path='/'))
	#cj.set_cookie(version=0, name='sitechrx', value=cookie, port=None, port_specified=False, domain='www.burning-series.to', domain_specified=False, domain_initial_dot=False, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={'HttpOnly': None}, rfc2109=False)

	#opener = urllib2.build_opener(urllib2.HTTPHandler(), cp)
	#opener.addheaders.append(('User-agent', 'Mozilla/5.0 (compatible)'))
	#opener.addheaders.append(('Referer', urlHost))

	#link = opener.open(url).read()

	return link
	
def getSiteCookie(urlH, cookiePattern):
	# hashdata auslesen
	req = urllib2.Request(url=urlH)
	response = urllib2.urlopen(req)
	req.add_header('User-Agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')
	urlData=response.read()
	response.close()
	matchA = re.compile(cookiePattern,re.DOTALL).findall(urlData)
	jsUrl = urlH + str(matchA[0][0])
	cookieA = str(matchA[0][1])+str(matchA[0][2])
	
	
	# js auslesen
	req = urllib2.Request(jsUrl)
	response = urllib2.urlopen(req)
	req.add_header('Referer', 'http://burning-series.to/')
	req.add_header('Accept', '*/*')
	req.add_header('Host', 'burning-series.to')
	urlData=response.read()
	response.close()
	jsRegex = 'escape\(hsh \+ "(.+?)"\)'
	matchA = re.compile(jsRegex,re.DOTALL).findall(urlData)
	cookieB = matchA[0]
	siteCookie = cookieA + cookieB
	cookieFinal = "sitechrx="+str(siteCookie)+";Path=/";
	cookieFinalB = str(siteCookie)
	print "-- cookieFinal "+cookieFinal
	print "-- cookieFinalB "+cookieFinalB
	
	# --- Und Hier will es nicht mehr --
	# --- nimmt den cookie nicht an, ich kriegs nicht hin --
	requ = urllib2.Request(urlH)
	requ.add_header('User-Agent', 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3')
	requ.add_header('Accept-Language', 'de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4')
	requ.add_header('Accept-Charset', 'ISO-8859-1,utf-8;q=0.7,*;q=0.7')
	requ.add_header('Cookie', cookieFinal)
	requ.add_header('Referer', 'http://burning-series.to/')
	#requ.add_header('Accept', '*/*')
	#requ.add_header('Host', 'burning-series.to')
	resp = urllib2.urlopen(requ)
	finalData=resp.read()
	resp.close()

	# --- sollte die eigentliche Seite auslesen..
	print "finalData : "+finalData
	
	#jar = CookieJar()
	#req = urllib2.Request(urlH)
	#jar.set_cookie(makeCookie(cookieFinalB))
	#jar.add_cookie_header(req)
	#req.add_header('Referer', 'http://burning-series.to/')
	#opener = urllib2.build_opener()
	#finalData = opener.open(req).read()


	#opener = urllib2.build_opener(urllib2.HTTPHandler(), cp)
	# see cookielib.Cookie documentation for options description
	#cj.set_cookie(cookielib.Cookie(name='sitechrx', value=cookieFinal, domain='www.burning-series.to/', path='/'))
	#cj.set_cookie(version=0, name='sitechrx', value=cookieFinal, port=None, port_specified=False, domain='www.burning-series.to', domain_specified=False, domain_initial_dot=False, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={'HttpOnly': None}, rfc2109=False)
	#opener.addheaders.append(('User-agent', 'Mozilla/5.0 (compatible)'))
	#opener.addheaders.append(('Referer', urlHost))
	#opener.add_cookie_header(
	#data = opener.open(urlH).read()
	
	return cookieFinal

def makeCookie(sValue):
		return Cookie(
        version=0,
        name="sitechrx",
        value=sValue,
        port=None,
        port_specified=False,
        domain="www.burning-series.to",
        domain_specified=True,
        domain_initial_dot=False,
        path="/",
        path_specified=True,
        secure=False,
        expires=None,
        discard=False,
        comment=None,
        comment_url=None,
        rest=None
    )
def addDirectoryItem(name, parameters={},pic=""):
    li = xbmcgui.ListItem(name,iconImage="DefaultFolder.png", thumbnailImage=pic)
    url = sys.argv[0] + '?' + urllib.urlencode(parameters)
    return xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]), url=url, listitem=li, isFolder=True)

def parameters_string_to_dict(parameters):
    ''' Convert parameters encoded in a URL to a dict. '''
    paramDict = {}
    if parameters:
        paramPairs = parameters[1:].split("&")
        for paramsPair in paramPairs:
            paramSplits = paramsPair.split('=')
            if (len(paramSplits)) == 2:
                paramDict[paramSplits[0]] = paramSplits[1]
    return paramDict

def substitute_entity(match):
    ent = match.group(3)
    
    if match.group(1) == "#":
        if match.group(2) == '':
            return unichr(int(ent))
        elif match.group(2) == 'x':
            return unichr(int('0x'+ent, 16))
    else:
        cp = n2cp.get(ent)

        if cp:
            return unichr(cp)
        else:
            return match.group()

def decode_htmlentities(string):
    entity_re = re.compile(r'&(#?)(x?)(\w+);')
    return entity_re.subn(substitute_entity, string)[0]

# ----- main -----

params = parameters_string_to_dict(sys.argv[2])
urlSeasons = str(params.get("urlS", ""))
urlEpisodes = str(params.get("urlE", ""))
urlHosts = str(params.get("urlH", ""))
urlVideo = str(params.get("urlV", ""))
SITEcookie = str(params.get("cookie", ""))
print "SITEcookie read : "+SITEcookie
if not sys.argv[2]:
	# new start
	ok = showContent()
else:
	if urlSeasons:
		newUrl = urlHost + urllib.unquote(urlSeasons)
		#print newUrl
		ok = showSeasons(newUrl,SITEcookie)
	if urlEpisodes:
		newUrl = urlHost + urllib.unquote(urlEpisodes)
		#print newUrl
		ok = showEpisodes(newUrl,SITEcookie)
	if urlHosts:
		newUrl = urlHost + urllib.unquote(urlHosts)
		#print newUrl
		ok = showHosts(newUrl,SITEcookie)
	if urlVideo:
		newUrl = urlHost + urllib.unquote(urlVideo)
		#print newUrl
		ok = showVideo(newUrl,SITEcookie)


